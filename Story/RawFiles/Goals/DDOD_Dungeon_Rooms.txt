Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION //Configure presets for dungeons
//DB_GenerateDungeonPreset(_presetIdx,_dungeonLayout,_roomsAmout,_dungeonWeight,_roomsAmoutVariation,_weightVariation,_maxDepth,_maxBranches,_maxBranchDepth)
//short
/*
DB_GenerateDungeonPreset(1,1,5,15,2,6,5,1,1); //easy
DB_GenerateDungeonPreset(2,1,5,25,2,10,5,1,1); //medium
DB_GenerateDungeonPreset(3,1,5,35,2,14,5,1,1); //hard
DB_GenerateDungeonPreset(4,1,5,50,2,20,5,1,1); //very hard
//medium
DB_GenerateDungeonPreset(5,1,7,21,2,6,7,1,2);
DB_GenerateDungeonPreset(6,1,7,35,2,10,7,1,2);
DB_GenerateDungeonPreset(7,1,7,49,2,14,7,1,2);
DB_GenerateDungeonPreset(8,1,7,70,2,20,7,1,2);
//long
DB_GenerateDungeonPreset(9,1,9,27,2,6,9,1,3);
DB_GenerateDungeonPreset(10,1,9,45,2,10,9,1,3);
DB_GenerateDungeonPreset(11,1,9,63,2,14,9,1,3);
DB_GenerateDungeonPreset(12,1,9,90,2,20,9,1,3);
//very long
DB_GenerateDungeonPreset(13,1,15,45,2,6,15,2,2);
DB_GenerateDungeonPreset(14,1,15,75,2,10,15,2,2);
DB_GenerateDungeonPreset(15,1,15,105,2,14,15,2,2);
DB_GenerateDungeonPreset(16,1,15,150,2,20,15,2,2);
*/
//_presetIdx,_dungeonLayout,_roomsAmout,_dungeonWeight,_roomsAmoutVariation,_weightVariation,_maxDepth,_maxBranches,_maxBranchDepth
//DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVariation,_dungeonWeight);
//END_REGION

//DB_rooms(_roomIdx,_roomLayout,_roomDepth,_maxEnemiesInRoom,_maxRoomWeight)

DB_lastRoomIdx(0);//or amout of rooms -1 (count from 0)

DB_amoutOfBranches(0);

//DB_roomsMap(_roomIdxFrom,_roomIdxTo,_transitionCostLight,_transitionCostFood)

//DB_generatedRoomEnemies(_pawnNumber,_charCreatedGuid);

//REGION //Rooms layout
//[Layout index],[Amout of layout templates]
DB_roomLayouts(1,0);
//DB_roomLayout_SpawnPoints([Layout index],[Index of room],[spawnpoint index based on spawnpoint postion],[spawnpoint Position(0-frontline, 1-midlane, 2-backline, 3-special)],[guid of spawnpoint trigger])
DB_roomLayout_SpawnPoints(1,0,0,0,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_001_45489240-fdb5-49a8-b395-f860755a3566);//enemy spawns
DB_roomLayout_SpawnPoints(1,0,1,0,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_002_fa12dba0-6ba0-4c53-8bd0-a99d60b3facd);
DB_roomLayout_SpawnPoints(1,0,2,0,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_003_ded76fe0-96f7-4074-ae2f-69ef5878221b);
DB_roomLayout_SpawnPoints(1,0,0,1,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_004_4d1a32cc-c51b-401f-a6ae-b538d353ab2f);
DB_roomLayout_SpawnPoints(1,0,1,1,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_005_8d0624ff-2044-4fe0-aefd-6c3c56150392);
DB_roomLayout_SpawnPoints(1,0,2,1,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_006_90a0262f-150a-4520-b1f3-4c582dada13d);
DB_roomLayout_SpawnPoints(1,0,0,2,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_007_c65584b3-a551-49ed-a50e-87ffff4b5e4c);
DB_roomLayout_SpawnPoints(1,0,1,2,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_008_35b6bf38-3742-4e92-9c9f-fc777b6c970a);
DB_roomLayout_SpawnPoints(1,0,2,2,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_009_1339ae22-4627-44c3-9a6a-555b77a12df3);
DB_roomLayout_SpawnPoints(1,0,0,3,TRIGGERGUID_S_DDOD_Dungeon_Forest_EnemySpawnTrigger_010_d0ac5519-ec6f-4f74-8774-4a87734e998e);
DB_roomLayout_SpawnPoints(1,0,-1,-1,TRIGGERGUID_S_DDOD_Dungeon_Forest_PlayerSpawnTrigger_001_f6ee0457-24b7-4e7d-ac20-595cf5cb328c);//player spawn

DB_roomLayout_BoundingBox(-1,-1,TRIGGERGUID_S_DemoHub_BoxTrigger_b2f6c3e8-7720-49a7-bcf5-4ac110d4ad14,TRIGGERGUID_DemoHub_AtmosphereTrigger_45194ce7-f2bd-4af3-b989-d5010736f625);
DB_roomLayout_BoundingBox(1,0,TRIGGERGUID_S_BoxTrigger_Layout_Forest_1_bb30049a-ddd5-40a8-9727-7c1937dec99b,TRIGGERGUID_AtmosphereTrigger_001_dbe2a6ff-df81-4841-b1fb-e51f86d79eec);
//DB_currentRoomItems((GUIDSTRING)_);

//DB_roomLayout_TreasureContainers([Layout index],[Index of room],[Treasure preset from stats for spawn],[Container guid])
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_A_001_de458f21-664b-47b8-a247-064f689a36e0);
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_B_001_3b89a9f2-1ebe-4f94-887b-369aee02d050);
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_A_000_fa19a75b-2b83-4693-a6c6-73272231b3e1);
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_B_000_e7f93cb3-c378-46ad-be63-4cae6959406e);
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_B_002_a008f536-5a73-4266-9cc8-7fd029d3d42a);
DB_roomLayout_TreasureContainers(1,0,"Cont_TreeTrunk",ITEMGUID_NAT_Tree_Stump_A_002_65dbf8a6-d8e1-46b8-b244-5883a83d67c7);
//END_REGION

DB_currentWeightScore(0);
KBSECTION
PROC
PROC_generateSelectedDungeon()
//AND
//QRY_DungeonPresetSelected()
AND
QRY_clearDungeonCurrentPreset()
AND
QRY_getDungeonLayout()
AND
QRY_getDungeonLength()
AND
QRY_getDungeonDifficulty()
AND
QRY_setupDungeonBranches()
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar,_maxBranches,_maxBranchDepth)
THEN
PROC_clearRoomsPath();
//PROC_clearDungeonLeaveCost();
PROC_GenerateDungeon(_roomsAmout,_weight,_roomsAmoutVar,_weightVar,_roomsAmout,_maxBranches,_maxBranchDepth);

//REGION //generate dungeon presets
QRY
QRY_getDungeonLayout()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Layout_1",1)
AND
DB_currentLayoutIdx(_oldLayoutIdx)
THEN
DB_CurrentDungeonPreset(1);
NOT DB_currentLayoutIdx(_oldLayoutIdx);
DB_currentLayoutIdx(1);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Layout_1");

QRY
QRY_getDungeonLayout()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Layout_2",1)
AND
DB_currentLayoutIdx(_oldLayoutIdx)
THEN
DB_CurrentDungeonPreset(2);
NOT DB_currentLayoutIdx(_oldLayoutIdx);
DB_currentLayoutIdx(2);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Layout_2");

QRY
QRY_getDungeonLayout()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Layout_3",1)
AND
DB_currentLayoutIdx(_oldLayoutIdx)
THEN
DB_CurrentDungeonPreset(3);
NOT DB_currentLayoutIdx(_oldLayoutIdx);
DB_currentLayoutIdx(3);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Layout_3");

QRY
QRY_getDungeonLength()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Length_1",1)
AND
DB_CurrentDungeonPreset(_layout)
THEN
NOT DB_CurrentDungeonPreset(_layout);
DB_CurrentDungeonPreset(_layout,5,2);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Length_1");

QRY
QRY_getDungeonLength()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Length_2",1)
AND
DB_CurrentDungeonPreset(_layout)
THEN
NOT DB_CurrentDungeonPreset(_layout);
DB_CurrentDungeonPreset(_layout,7,2);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Length_2");

QRY
QRY_getDungeonLength()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Length_3",1)
AND
DB_CurrentDungeonPreset(_layout)
THEN
NOT DB_CurrentDungeonPreset(_layout);
DB_CurrentDungeonPreset(_layout,9,2);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Length_3");

QRY
QRY_getDungeonLength()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Length_4",1)
AND
DB_CurrentDungeonPreset(_layout)
THEN
NOT DB_CurrentDungeonPreset(_layout);
DB_CurrentDungeonPreset(_layout,15,2);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Length_4");

QRY
QRY_getDungeonDifficulty()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Difficulty_1",1)
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar)
AND
IntegerProduct(_roomsAmout,3,_weight)
AND
IntegerProduct(_roomsAmoutVar,3,_weightVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar);
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Difficulty_1");

QRY
QRY_getDungeonDifficulty()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Difficulty_2",1)
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar)
AND
IntegerProduct(_roomsAmout,5,_weight)
AND
IntegerProduct(_roomsAmoutVar,5,_weightVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar);
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Difficulty_2");

QRY
QRY_getDungeonDifficulty()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Difficulty_3",1)
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar)
AND
IntegerProduct(_roomsAmout,7,_weight)
AND
IntegerProduct(_roomsAmoutVar,7,_weightVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar);
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Difficulty_3");

QRY
QRY_getDungeonDifficulty()
AND
GlobalGetFlag("DDOD_Dungeon_SignRoad_Difficulty_4",1)
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar)
AND
IntegerProduct(_roomsAmout,10,_weight)
AND
IntegerProduct(_roomsAmoutVar,10,_weightVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar);
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);
GlobalClearFlag("DDOD_Dungeon_SignRoad_Difficulty_4");

QRY
QRY_setupDungeonBranches()
AND
DB_currentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar)
AND
IntegerDivide(_roomsAmout,5,_maxBranches)
AND
IntegerDivide(_roomsAmout,4,_maxBranchDepth)
THEN
NOT DB_currentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);
DB_currentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar,_maxBranches,_maxBranchDepth);

QRY
QRY_clearDungeonCurrentPreset()
THEN
DB_NOOP(0);

QRY
QRY_clearDungeonCurrentPreset()
AND
DB_CurrentDungeonPreset(_layout)
THEN
NOT DB_CurrentDungeonPreset(_layout);

QRY
QRY_clearDungeonCurrentPreset()
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar);

QRY
QRY_clearDungeonCurrentPreset()
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar,_maxBranches,_maxBranchDepth)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar,_maxBranches,_maxBranchDepth);

QRY
QRY_clearDungeonCurrentPreset()
AND
DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar)
THEN
NOT DB_CurrentDungeonPreset(_layout,_roomsAmout,_roomsAmoutVar,_weight,_weightVar);


//END_REGION

//REGION //main proc for generating rooms
PROC 
PROC_GenerateDungeon((INTEGER)_maxDungeonRooms,(INTEGER)_maxDungeonWeight,(INTEGER)_maxRoomsVariation,(INTEGER)_maxWeightVariation,(INTEGER)_maxDepth,(INTEGER)_maxBranches,(INTEGER)_maxBranchDepth)
AND
IntegerSum(_maxRoomsVariation,1,_maxRoomsVariationRndEd)
AND
Random(_maxRoomsVariationRndEd,_randRooms)//rand delta with param for amout of rooms
AND
IntegerSum(_maxWeightVariation,1,_maxWeightVariationRndEd)
AND
Random(_maxWeightVariationRndEd,_totalWeightVariation) //rand weight variaton for dungeon
AND
IntegerDivide(_maxRoomsVariation,2,_maxRoomsVariationEd)
AND
IntegerSubtract(_maxDungeonRooms,_maxRoomsVariationEd,_maxDungeonRoomsEd)
AND
IntegerSum(_maxDungeonRoomsEd,_randRooms,_totalRooms) //get amout of rooms
AND
IntegerDivide(_maxWeightVariation,2,_maxWeightVariationEd)
AND
IntegerSubtract(_maxDungeonWeight,_maxWeightVariationEd,_maxDungeonWeightEd)
AND
IntegerSum(_maxDungeonWeightEd,_totalWeightVariation,_totalWeight) //calc total dungeon weight
AND
DB_currentLayoutIdx(_layoutIdx)
AND
DB_amoutOfBranches(_amoutOfBranches)
AND
DB_lastRoomIdx(_lastRoomIdx)
THEN
NOT DB_amoutOfBranches(_amoutOfBranches);
DB_amoutOfBranches(0);
NOT DB_lastRoomIdx(_lastRoomIdx);
DB_lastRoomIdx(0);
PROC_countPawnsByWeight();
//((INTEGER)_prevRoomIdx,(INTEGER)_maxRooms,(INTEGER)_maxBranches,(INTEGER)_maxDepth,(INTEGER)_maxBrenchDepth,(INTEGER)_previousRoomDepth
PROC_generateRoomTree(-1,_totalRooms,_maxBranches,_maxDepth,_maxBranchDepth,0,0);
PROC_assignAmoutOfEnemiesForRooms(5,3);
PROC_assignLayoutPerRoom(_layoutIdx);
//(INTEGER)_maxRooms,(INTEGER)_maxWeight,(INTEGER)_maxDepth,(INTEGER)_weightVar
PROC_assignAmoutOfWeightForRooms(_totalRooms,_totalWeight,_maxDepth,_maxWeightVariation);
PROC_startGenerateRooms(1);

//one procedure to generate them all
PROC
PROC_generateRoomTree((INTEGER)_prevRoomIdx,(INTEGER)_maxRooms,(INTEGER)_maxBranches,(INTEGER)_maxDepth,(INTEGER)_maxBranchDepth,(INTEGER)_previousRoomDepth,(INTEGER)_isBranch)
AND
_isBranch==0
AND
_previousRoomDepth<_maxDepth
AND
IntegerSum(_previousRoomDepth,1,_currentRoomDepth)

AND
DB_lastRoomIdx(_roomsCount)
AND
_roomsCount<_maxRooms
AND
IntegerSum(_roomsCount,1,_roomIdx)

THEN
NOT DB_lastRoomIdx(_roomsCount);
DB_lastRoomIdx(_roomIdx);

DB_roomsMap(_prevRoomIdx,_roomIdx,1,1);
DB_roomsMap(_roomIdx,_prevRoomIdx,0,1);

DB_rooms(_roomIdx,-1,_currentRoomDepth);

PROC_generateBranch(_roomIdx,_maxRooms,_maxDepth,_maxBranchDepth,_currentRoomDepth,_maxBranches);

PROC_generateRoomTree(_roomIdx,_maxRooms,_maxBranches,_maxDepth,_maxBranchDepth,_currentRoomDepth,_isBranch);

PROC
PROC_generateRoomTree((INTEGER)_prevRoomIdx,(INTEGER)_maxRooms,(INTEGER)_maxBranches,(INTEGER)_maxDepth,(INTEGER)_maxBranchDepth,(INTEGER)_previousRoomDepth,(INTEGER)_isBranch)
AND
_isBranch==1
AND
_previousRoomDepth<_maxBranchDepth
AND
IntegerSum(_previousRoomDepth,1,_currentRoomDepth)

AND
DB_lastRoomIdx(_roomsCount)
AND
_roomsCount<_maxRooms
AND
IntegerSum(_roomsCount,1,_roomIdx)

THEN
NOT DB_lastRoomIdx(_roomsCount);
DB_lastRoomIdx(_roomIdx);

DB_roomsMap(_prevRoomIdx,_roomIdx,1,1);
DB_roomsMap(_roomIdx,_prevRoomIdx,0,1);

DB_rooms(_roomIdx,-1,_currentRoomDepth);

PROC_generateRoomTree(_roomIdx,_maxRooms,_maxBranches,_maxDepth,_maxBranchDepth,_currentRoomDepth,_isBranch);

PROC
PROC_generateBranch((INTEGER)_roomIdx,(INTEGER)_maxRooms,(INTEGER)_maxDepth,(INTEGER)_maxBrenchDepth,(INTEGER)_previousRoomDepth,(INTEGER)_maxBranches)
AND
_roomIdx != -1
AND
DB_amoutOfBranches(_amoutOfBranches)
AND
_amoutOfBranches<_maxBranches
AND
IntegerSum(_amoutOfBranches,1,_newAmoutOfBranches)

AND
Random(2,_flagGenerateBranch)
AND
_flagGenerateBranch > 0

AND
IntegerSum(_maxBrenchDepth,_previousRoomDepth,_newMaxBranchDepth)
THEN
NOT DB_amoutOfBranches(_amoutOfBranches);
DB_amoutOfBranches(_newAmoutOfBranches);
PROC_generateRoomTree(_roomIdx,_maxRooms,_maxBranches,_maxDepth,_newMaxBranchDepth,_previousRoomDepth,1);


//assign enemy count for each room
PROC
PROC_assignAmoutOfEnemiesForRooms((INTEGER)_maxEnemiesPerRoom,(INTEGER)_maxEnemiesPerRoomVar)
AND
DB_rooms(_roomIdx,_roomLayout,_roomDepth)
AND
Random(_maxEnemiesPerRoomVar,_enemiesEd)
AND
IntegerSubtract(_maxEnemiesPerRoom,_enemiesEd,_enemiesInRoom)
THEN
NOT DB_rooms(_roomIdx,_roomLayout,_roomDepth);
DB_rooms(_roomIdx,_roomLayout,_roomDepth,_enemiesInRoom,0);

PROC
PROC_assignLayoutPerRoom((INTEGER)_layoutIdx)
AND
DB_rooms(_roomIdx,_roomLayout,_roomDepth,_enemiesInRoom,_roomWeight)
AND
DB_roomLayouts(_layoutIdx,_layoutNumber)
AND
Random(_layoutNumber,_newRoomLayout)
THEN
NOT DB_rooms(_roomIdx,_roomLayout,_roomDepth,_enemiesInRoom,_roomWeight);
DB_rooms(_roomIdx,_newRoomLayout,_roomDepth,_enemiesInRoom,_roomWeight);

PROC
PROC_assignAmoutOfWeightForRooms((INTEGER)_maxRooms,(INTEGER)_maxWeight,(INTEGER)_maxDepth,(INTEGER)_weightVar)
AND
Random(_weightVar,_roomWeightVar)
AND
IntegerSubtract(_maxWeight,_roomWeightVar,_resultMaxWeight)
AND
DB_rooms(_roomNumber,_roomLayout,_roomDepth,_maxEnemiesInRoom,_dummyRoomMaxWeight)
AND
IntegerMin(_maxRooms,_maxDepth,_maxDepthEd)
AND
IntegerSubtract(_maxDepthEd,_roomDepth,_resultRoomDepth)
AND
IntegerMax(_resultRoomDepth,1,_corRoomDepth)

AND
IntegerSubtract(_maxRooms,_roomNumber,_resultRoomsModifier)
AND
IntegerMax(_resultRoomsModifier,1,_corRoomsModifier)

AND
IntegerSum(_corRoomDepth,_corRoomsModifier,_resultKoeff)
AND
IntegerDivide(_resultMaxWeight,_resultKoeff,_resultRoomWeight)

THEN
NOT DB_rooms(_roomNumber,_roomLayout,_roomDepth,_maxEnemiesInRoom,_dummyRoomMaxWeight);
DB_rooms(_roomNumber,_roomLayout,_roomDepth,_maxEnemiesInRoom,_resultRoomWeight);


//start generate rooms
PROC
PROC_startGenerateRooms((INTEGER)_roomIdx)
AND
DB_rooms(_roomIdx,_roomLayout,_roomDepth,_maxEnemiesInRoom,_roomMaxWeight) 
AND
IntegerSum(_roomIdx,1,_nextRoomIdx)
THEN
PROC_generatePawns(_roomIdx,_roomLayout,_maxEnemiesInRoom,_roomMaxWeight,0,0);
PROC_startGenerateRooms(_nextRoomIdx);
//END_REGION

//REGION //populate
PROC
PROC_populateRoom((INTEGER)_roomIdx,(INTEGER)_level)
AND
DB_currentLayoutIdx(_layoutIdx)
AND
DB_rooms(_roomIdx,_roomLayout,_roomDepth,_maxEnemiesInRoom,_roomMaxWeight)
AND
QRY_resetCounter()
AND
DB_pawns_1(_roomIdx,_pawnNumber,_pawnWeight,_pawnIdx)
AND
DB_pawns(_pawnIdx,_pawnSpawnPos,_pawnGuid,_pawnWeight,_pawnRoomWeightMinThreshold,_pawnRoomWeightMaxThreshold,_pawnCharMaxLevel,_pawnEquipMaxLevel)
AND
QRY_resetCounterIFVChanged(_pawnSpawnPos)
AND
QRY_resetCounterIFVMoreThan(2)
AND
DB_counter(_counter)
AND
QRY_counter()
AND
DB_roomLayout_SpawnPoints(_layoutIdx,_roomLayout,_counter,_pawnSpawnPos,_spawnPointGuid)
AND
GetRandomPositionInTrigger((TRIGGERGUID)_spawnPointGuid,_X,_Y,_Z)
AND
TemporaryCharacterCreateAtPosition(_X,_Y,_Z,_pawnGuid,0,(CHARACTERGUID)_charCreatedGuid)
AND
DB_roomLayout_SpawnPoints(_layoutIdx,_roomLayout,-1,-1,_playersSpawnPointGuid)
AND
IntegerMin(_level,_pawnCharMaxLevel,_pawnCharLevel)
AND
IntegerMin(_level,_pawnEquipMaxLevel,_pawnEquipLevel)
THEN
DB_generatedRoomEnemies(_pawnNumber,_charCreatedGuid);
PROC_charLevelUpTo(_charCreatedGuid,_pawnCharLevel,1);
PROC_equipLevelUpTo(_charCreatedGuid,_pawnEquipLevel,1);
CharacterLookAt(_charCreatedGuid,_playersSpawnPointGuid);

PROC
PROC_depopulateRoom()
AND
DB_generatedRoomEnemies(_pawnNumber,_enemyGuid)
THEN
RemoveTemporaryCharacter(_enemyGuid);
NOT DB_generatedRoomEnemies(_pawnNumber,_enemyGuid);
//END_REGION

//REGION //clear items and characters
IF
GameStarted("HubLocation",_)
AND
DB_roomLayout_BoundingBox(_,_,_trigger,_)
THEN
TriggerRegisterForItems((TRIGGERGUID)_trigger);

PROC
PROC_registerPlayerForTrigger((CHARACTERGUID)_char)
AND
DB_roomLayout_BoundingBox(_,_,_trigger,_)
THEN
TriggerRegisterForCharacter((TRIGGERGUID)_trigger,_char);

PROC
PROC_clearCurrentRoomItems()
AND
DB_currentRoomItems(_item)
AND
NOT DB_roomLayout_TreasureContainers(_,_,_,_item)
THEN
ItemRemove(_item);

PROC
PROC_clearCurrentRoomCharacters()
AND
DB_currentRoomCharacters(_char)
AND
CharacterIsDead(_char,1)
THEN
RemoveTemporaryCharacter(_char);
SetOnStage(_char,0);

PROC
PROC_clearRoomSurface()
AND
DB_roomLayout_BoundingBox(_,_,_triggerBox,_)
THEN
RemoveSurfaceLayer(_triggerBox,0,50.0);
RemoveSurfaceLayer(_triggerBox,1,50.0);

IF
ItemEnteredTrigger(_item,_trigger,_)
AND
DB_roomLayout_BoundingBox(_layoutIdx,_roomLayoutIdx,_trigger,_)
THEN
DB_currentRoomItems(_item);

IF
ItemLeftTrigger(_item,_trigger,_)
AND
DB_roomLayout_BoundingBox(_layoutIdx,_roomIdx,_trigger,_)
THEN
NOT DB_currentRoomItems(_item);

IF
CharacterEnteredTrigger(_char,_trigger)
AND
DB_roomLayout_BoundingBox(_layoutIdx,_roomLayoutIdx,_trigger,_)
THEN
DB_currentRoomCharacters(_char);

IF
CharacterLeftTrigger(_char,_trigger)
AND
DB_roomLayout_BoundingBox(_layoutIdx,_roomIdx,_trigger,_)
THEN
NOT DB_currentRoomCharacters(_char);


IF //remove from room pawns data
CharacterDied(_char)
AND
DB_generatedRoomEnemies(_number,_char)
AND
DB_currentRoomIdx(_roomIdx)
AND
DB_pawns_1(_roomIdx,_number,_weight,_idx)
AND
DB_currentWeightScore(_currentWeightScore)
AND
IntegerSum(_currentWeightScore,_weight,_newWeightScore)
THEN
NOT DB_currentWeightScore(_currentWeightScore);
DB_currentWeightScore(_newWeightScore);
NOT DB_pawns_1(_roomIdx,_number,_weight,_idx);

PROC
PROC_clearRoomsData()
THEN
PROC_clearRoomSurface();
PROC_depopulateRoom();
PROC_clearRoomsMapData();
PROC_clearRooms();
NOT DB_dungeonGenerated(1);
DB_dungeonGenerated(0);

PROC
PROC_clearRooms()
AND
DB_rooms(_roomIdx,_roomLayout,_roomDepth,_maxEnemiesInRoom,_roomWeight)
THEN
NOT DB_rooms(_roomIdx,_roomLayout,_roomDepth,_maxEnemiesInRoom,_roomWeight);

PROC
PROC_clearRoomsMapData()
AND
DB_roomsMap(_idxFrom,_idxTo,_costLight,_costFood)
THEN
NOT DB_roomsMap(_idxFrom,_idxTo,_costLight,_costFood);

PROC
PROC_resetWeigthScore()
AND
DB_currentWeightScore(_weightScore)
THEN
NOT DB_currentWeightScore(_weightScore);
DB_currentWeightScore(0);
//END_REGION

PROC
PROC_teleportPlayersToRoom((INTEGER)_layoutIdx,(INTEGER)_roomIdx)
AND
DB_rooms(_roomIdx,_roomLayoutIdx,_,_,_)
AND
DB_roomLayout_SpawnPoints(_layoutIdx,_roomLayoutIdx,-1,-1,_teleportationTriggerGuid)
THEN
CharacterTeleportPartiesToTrigger((TRIGGERGUID)_teleportationTriggerGuid,"DDOD_RoomChanged");

//REGION //regenerate room containers

PROC
PROC_generateRoomTreasure((INTEGER)_layoutType,(INTEGER)_roomIdx)
AND
DB_rooms(_roomIdx,_roomLayout,_,_,_)
AND
DB_roomLayout_TreasureContainers(_layoutType,_roomLayout,_treasure,_containerGuid)
AND
DB_playersMaxLevel(_char,_level)
AND
GetTemplate(_containerGuid,_template)
AND
GetPosition(_containerGuid,_X,_Y,_Z)
AND
CreateItemTemplateAtPosition(_template,_X,_Y,_Z,_newContainer)
THEN
NOT DB_roomLayout_TreasureContainers(_layoutType,_roomLayout,_treasure,_containerGuid);
DB_roomLayout_TreasureContainers(_layoutType,_roomLayout,_treasure,_newContainer);
GenerateTreasure(_newContainer,_treasure,_level,(CHARACTERGUID)_char);
ItemRemove((ITEMGUID)_containerGuid);


//END_REGION

//REGION //room alarm system
IF
CombatStarted(_combatId)
AND
DB_generatedRoomEnemies(_,_generatedEnemy)
AND
CharacterIsInCombat(_generatedEnemy,1)
AND
CombatGetInvolvedPlayer(_combatId,1,_playerTarget)
THEN
PROC_alarmRoom(_combatId,_playerTarget);

PROC
PROC_alarmRoom((INTEGER)_combatId,(CHARACTERGUID)_playerTarget)
AND
DB_generatedRoomEnemies(_,_generatedEnemy)
AND
CharacterIsInCombat(_generatedEnemy,0)
THEN
EnterCombat(_generatedEnemy,_playerTarget);
//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
