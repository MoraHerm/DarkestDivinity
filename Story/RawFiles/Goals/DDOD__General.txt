Version 1
SubGoalCombiner SGC_AND
INITSECTION
//REGION //debug
//DB_IsPlayer(CHARACTERGUID_S_Player_Alex_358e2f21-5148-4d6c-b5c6-b162a2726dd1);
//PROC_updatePlayersCharactersStatus(CHARACTERGUID_S_Player_Alex_358e2f21-5148-4d6c-b5c6-b162a2726dd1);
//END_REGION

//REGION //defenition&description
//Database contains all active characters (now in party)
//DB_PlayersCharacters_Active((CHARACTERGUID)_characterGuid)

//Database contains all Inactive characters (now on in party. Resting in hub or some sort of)
//DB_PlayersCharacters_Inactive((CHARACTERGUID)_characterGuid)

//Database contains all Suspended characters (dead, dismissed and resurrected as undead)
//DB_PlayersCharacters_Suspend((CHARACTERGUID)_characterGuid,(STRING)_type) _type = {"dead","dismiss","resurrect"}

//food
//DB_PlayersCharacters_Food((CHARACTERGUID)_characterGuid,_value)

//moralLevel
//DB_PlayersCharacters_Moral((CHARACTERGUID)_characterGuid,_value)

//stressTolerance
//DB_PlayersCharacters_Fatigue((CHARACTERGUID)_characterGuid,_value)

//DB_lightModifiers_Active(_guid,_statusName)

//DB_lightModifiers_CurrentModifier(_modifier)
DB_lightModifiers_CurrentModifier(0);

//DB_lightModifiers_Statuses(_status,_modifierAmount)
DB_lightModifiers_Statuses("BURNING",1);
DB_lightModifiers_Statuses("NECROFIRE",2);
DB_lightModifiers_Statuses("HELLFIRE",2);
DB_lightModifiers_Statuses("FLAMING_TONGUES",1);
DB_lightModifiers_Statuses("HEALING_TEARS",1);
DB_lightModifiers_Statuses("GUARDIAN_ANGEL",1);


DB_currentLightAmout(0);

//END_REGION

//REGION //init hub location start
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_001_aa3a51f7-6293-4363-8b5b-9f9f9019a681,"");
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_002_4eafde5b-9b97-4dd0-ad31-f938bbb336e1,"");
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_003_3eede529-4523-4d0d-97f0-b7c1f3796412,"");
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_004_f322ef52-2dc1-458d-83b6-89dc54b4e3cd,"");
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_005_17f4ace5-e087-4487-847a-3f90e22d2c71,"");
DB_CharacterCreationTransitionInfo("HubLocation",(TRIGGERGUID)TRIGGERGUID_StartPoint_HubLocation_006_a63f2f04-ab4f-48f3-b99d-f9aadacbc22c,"");

DB_GLO_FirstLevelAfterCharacterCreation("HubLocation");

//END_REGION

DB_playersMaxLevel(CHARACTERGUID_NULL_00000000-0000-0000-0000-000000000000,1);

KBSECTION
IF
GameStarted("HubLocation",1)
THEN
DB_IsPlayer(CHARACTERGUID_S_Player_Frederick_1434386d-a57b-4107-a8d4-27d934d49e49);
PROC_updatePlayersCharactersStatus(CHARACTERGUID_S_Player_Frederick_1434386d-a57b-4107-a8d4-27d934d49e49);
IF
GameStarted("HubLocation",0)
THEN
PROC_updatePlayersCharactersStatus();

IF
GameStarted("HubLocation",0)
AND
DB_isPlayer(_player)
THEN
ObjectSetFlag(_player,"Advneturer_Hire",-1);
PROC_GLO_PartyMembers_ResetInPartyDialogs(_player);
PROC_GLO_PartyMembers_SetInpartyDialog(_player,"Adventurer");

IF
CharacterResurrected(_char)
AND
DB_IsPlayer(_char)
THEN
PROC_updatePlayersCharactersStatus(_char);


PROC
PROC_Shared_CharacterCreation_Init()
AND
NOT DB_DDOD_RegisteredOrigins(1)
THEN
DB_DDOD_RegisteredOrigins(1);

DB_Origins((CHARACTERGUID)S_Player_Frederick_1434386d-a57b-4107-a8d4-27d934d49e49);
DB_Origins((CHARACTERGUID)S_Player_Andry_31705d73-8280-40ef-a4c5-914f2680c3ac);
DB_Origins((CHARACTERGUID)S_Player_Alex_358e2f21-5148-4d6c-b5c6-b162a2726dd1);
DB_Origins((CHARACTERGUID)S_Player_Duck_8b4fa1dd-e518-4947-9a0b-e94207f9cf64);
DB_OriginNPCAlignment((CHARACTERGUID)S_Player_Frederick_1434386d-a57b-4107-a8d4-27d934d49e49, "Generic_Companions_5");
DB_OriginNPCAlignment((CHARACTERGUID)S_Player_Andry_31705d73-8280-40ef-a4c5-914f2680c3ac, "Generic_Companions_6");
DB_OriginNPCAlignment((CHARACTERGUID)S_Player_Alex_358e2f21-5148-4d6c-b5c6-b162a2726dd1, "Generic_Companions_7");
DB_OriginNPCAlignment((CHARACTERGUID)S_Player_Duck_8b4fa1dd-e518-4947-9a0b-e94207f9cf64, "Generic_Companions_8");


IF
StoryEvent(_,"DDOD_softExitDungeon")
AND
DB_PlayersCharacters_Active(_char)
THEN
PROC_changeFatigue(_char,1);

IF
StoryEvent(_,"DDOD_softExitDungeon")
AND
DB_PlayersCharacters_Inactive(_char)
THEN
PROC_changeFatigue(_char,-1);
PROC_PlayersCharacters_ResetMoral(_char);
PROC_PlayersCharacters_ResetFood(_char);

IF
StoryEvent(_,"DDOD_hardExitDungeon")
AND
DB_PlayersCharacters_Active(_char)
THEN
PROC_changeFatigue(_char,2);

IF
StoryEvent(_,"DDOD_hardExitDungeon")
AND
DB_PlayersCharacters_Inactive(_char)
THEN
PROC_changeFatigue(_char,-1);
PROC_PlayersCharacters_ResetMoral(_char);
PROC_PlayersCharacters_ResetFood(_char);

IF 
DB_IsPlayer(_char)
AND
ObjectGetFlag(_char,"Adventurer_Hire",0)
THEN
ObjectSetFlag(_char,"Adventurer_Hire",-1);

//REGION //update statuses on char in/out of the party
IF
CharacterDied(_char)
AND
DB_PlayersCharacters_Active(_char)
AND
IsTagged(_char,"AVATAR",1)
AND
IsTagged(_char,"BLOCK_RESURRECTION",1)
THEN
PROC_changeMoral(-1);
CharacterSetCorpseLootable(_char,1);
NOT DB_IsPlayer(_char);
PROC_GLO_PartyMembers_Remove(_char,NULL_00000000-0000-0000-0000-000000000000,1,0);
PROC_PlayersCharacters_ToDead(_char);

PROC
PROC_updatePlayersCharactersStatus((CHARACTERGUID)_char)
AND
DB_IsPlayer(_char)
AND
NOT DB_PlayersCharacters_Inactive(_char)
AND
DB_PlayersCharacters_Active(_char)
AND
IsTagged(_char,"UNDEAD",0)
THEN
PROC_PlayersCharacters_initFood((CHARACTERGUID)_char);
PROC_PlayersCharacters_initMoral((CHARACTERGUID)_char);
PROC_PlayersCharacters_initFatigue((CHARACTERGUID)_char);
PROC_changeLight(0);

PROC
PROC_updatePlayersCharactersStatus((CHARACTERGUID)_char)
AND
DB_IsPlayer(_char)
AND
NOT DB_PlayersCharacters_Inactive(_char)
AND
DB_PlayersCharacters_Active(_char)
AND
IsTagged(_char,"UNDEAD",1)
THEN
PROC_changeLight(0);

PROC
PROC_updatePlayersCharactersStatus((CHARACTERGUID)_char)
AND
DB_IsPlayer(_char)
AND
NOT DB_PlayersCharacters_Inactive(_char)
AND
NOT DB_PlayersCharacters_Active(_char)
AND
IsTagged(_char,"UNDEAD",0)
THEN
DB_PlayersCharacters_Active((CHARACTERGUID)_char);
PROC_PlayersCharacters_initFood((CHARACTERGUID)_char);
PROC_PlayersCharacters_initMoral((CHARACTERGUID)_char);
PROC_PlayersCharacters_initFatigue((CHARACTERGUID)_char);
PROC_changeLight(0);
PROC_registerPlayerForTrigger(_char);

PROC
PROC_updatePlayersCharactersStatus((CHARACTERGUID)_char)
AND
DB_IsPlayer(_char)
AND
NOT DB_PlayersCharacters_Inactive(_char)
AND
NOT DB_PlayersCharacters_Active(_char)
AND
IsTagged(_char,"UNDEAD",1)
THEN
DB_PlayersCharacters_Active((CHARACTERGUID)_char);
PROC_changeLight(0);
PROC_registerPlayerForTrigger(_char);

PROC
PROC_updatePlayersCharactersStatus()
AND
DB_IsPlayer(_char)
THEN
PROC_updatePlayersCharactersStatus(_char);

//END_REGION

//REGION //apply new hunger status
PROC
PROC_PlayersCharacters_initFood((CHARACTERGUID)_char)
AND
NOT DB_PlayersCharacters_Food(_char,_)
THEN
DB_PlayersCharacters_Food((CHARACTERGUID)_char,0);

IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_SickBucket_038e75ef-9a0d-4635-8152-24923850aba2")
THEN
PROC_changeFood(_char,-1);

IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_ProvisionsPackage_450c53f8-58a5-4750-8b04-25939e05d071")
AND
ItemIsInUserInventory(_item,_char,0,1)
THEN
PROC_changeFood(_char,3);
ItemTemplateRemoveFromUser("Quest_DDOD_ProvisionsPackage_450c53f8-58a5-4750-8b04-25939e05d071",_char,1);

IF
CharacterUsedItem(_char,_item)
AND
IsTagged(_item,"FOOD",1)
AND
IsTagged(_item,"POISONED",0)
THEN
PROC_changeFood(_char,1);

IF
DB_PlayersCharacters_Food(_char,_foodLevel)
AND
QRY_applyNewHungerStatus((CHARACTERGUID)_char,_foodLevel)
THEN
DB_NOOP(0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==4
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger-3",-1.0);
PROC_changeMoral(_char,1);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==3
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger-2",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==2
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger-1",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel<2
AND
_foodLevel>-1
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger0",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==-1
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger1",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==-2
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger2",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==-3
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger3",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==-4
THEN
PROC_clearHungerStatus(_char);
ApplyStatus(_char,"Hunger4",-1.0);

QRY
QRY_applyNewHungerStatus((CHARACTERGUID)_char,(INTEGER)_foodLevel)
AND
_foodLevel==-5
THEN
PROC_clearHungerStatus(_char);
CharacterDie(_char,1,"None",CHARACTERGUID_NULL_00000000-0000-0000-0000-000000000000);

PROC
PROC_clearHungerStatus((CHARACTERGUID)_char)
THEN
RemoveStatus((GUIDSTRING)_char,"Hunger-3");
RemoveStatus((GUIDSTRING)_char,"Hunger-2");
RemoveStatus((GUIDSTRING)_char,"Hunger-1");
RemoveStatus((GUIDSTRING)_char,"Hunger0");
RemoveStatus((GUIDSTRING)_char,"Hunger1");
RemoveStatus((GUIDSTRING)_char,"Hunger2");
RemoveStatus((GUIDSTRING)_char,"Hunger3");
RemoveStatus((GUIDSTRING)_char,"Hunger4");

PROC
PROC_changeFood((INTEGER)_foodAmout)
AND
DB_PlayersCharacters_Active(_char)
AND
DB_PlayersCharacters_Food(_char,_foodLevel)
AND
IntegerSum(_foodLevel,_foodAmout,_newFoodLevel)
AND
IntegerMax(_newFoodLevel,-5,_maxFoodLevel)
AND
IntegerMin(_maxFoodLevel,4,_resultFoodLevel)
THEN
NOT DB_PlayersCharacters_Food(_char,_foodLevel);
DB_PlayersCharacters_Food(_char,_resultFoodLevel);
SetStoryEvent(_char,"DDOD_Character_FoodLevelChanged");

PROC
PROC_changeFood((CHARACTERGUID)_char,(INTEGER)_foodAmout)
AND
DB_PlayersCharacters_Active(_char)
AND
DB_PlayersCharacters_Food(_char,_foodLevel)
AND
IntegerSum(_foodLevel,_foodAmout,_newFoodLevel)
AND
IntegerMax(_newFoodLevel,-5,_maxFoodLevel)
AND
IntegerMin(_maxFoodLevel,4,_resultFoodLevel)
THEN
NOT DB_PlayersCharacters_Food(_char,_foodLevel);
DB_PlayersCharacters_Food(_char,_resultFoodLevel);
SetStoryEvent(_char,"DDOD_Character_FoodLevelChanged");
//END_REGION

//REGION //light system
IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_SandBucket_3db5ca18-803b-43cd-a2e6-9a82f77e65da")
THEN
PROC_changeLight(_char,-1);

IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_LightTorch_fec85594-f314-4297-b3d2-6a5a997808c7")
AND
ItemIsInUserInventory(_item,_char,0,1)
THEN
ItemTemplateRemoveFromUser("Quest_DDOD_LightTorch_fec85594-f314-4297-b3d2-6a5a997808c7",_char,1);
PROC_changeLight(_char,1);

IF
CharacterStatusApplied(_char,_status,_)
AND
NOT DB_lightModifiers_Active(_char,_status)
AND
DB_lightModifiers_Statuses(_status,_mod)
AND
DB_lightModifiers_CurrentModifier(_curLightMod)
AND
IntegerSum(_curLightMod,_mod,_newLightMod)
THEN
NOT DB_lightModifiers_CurrentModifier(_curLightMod);
DB_lightModifiers_CurrentModifier(_newLightMod);
DB_lightModifiers_Active(_char,_status);
PROC_changeLight(0);

IF
CharacterStatusRemoved(_char,_status,_)
AND
DB_lightModifiers_Statuses(_status,_mod)
AND
DB_lightModifiers_Active(_char,_status)
AND
DB_lightModifiers_CurrentModifier(_curLightMod)
AND
IntegerSubtract(_curLightMod,_mod,_newLightMod)
THEN
NOT DB_lightModifiers_CurrentModifier(_curLightMod);
DB_lightModifiers_CurrentModifier(_newLightMod);
PROC_changeLight(0);
NOT DB_lightModifiers_Active(_char,_status);

PROC
PROC_changeLight((GUIDSTRING)_char,(INTEGER)_lightAmout)
AND
DB_currentLightAmout(_currentLightAmout)
AND
IntegerSum(_currentLightAmout,_lightAmout,_newLightAmout)
AND
DB_lightModifiers_CurrentModifier(_lightModifier)
AND
IntegerSum(_newLightAmout,_lightModifier,_newLightAmoutMod)
AND
IntegerMax(_newLightAmoutMod,0,_maxLightAmout)
AND
IntegerMin(_newLightAmoutMod,3,_resultLightAmout)
AND
QRY_applyNewLightStatus(_resultLightAmout)
THEN
NOT DB_currentLightAmout(_currentLightAmout);
DB_currentLightAmout(_newLightAmout);
PROC_setLightAtmosphere(_resultLightAmout);

PROC
PROC_changeLight((INTEGER)_lightAmout)
THEN
PROC_changeLight(ITEMGUID_S_DDOD_HUB_SignRoad_DungeonStart_7db626a0-8abb-495b-899d-3c844a97143e,_lightAmout);

QRY
QRY_applyNewLightStatus((INTEGER)_lightLevel)
AND
_lightLevel==3
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_char)
THEN
PROC_clearLightStatus(_char);
ApplyStatus(_char,"Light3",-1.0);

QRY
QRY_applyNewLightStatus((INTEGER)_lightLevel)
AND
_lightLevel==2
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_char)
THEN
PROC_clearLightStatus(_char);
ApplyStatus(_char,"Light2",-1.0);

QRY
QRY_applyNewLightStatus((INTEGER)_lightLevel)
AND
_lightLevel==1
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_char)
THEN
PROC_clearLightStatus(_char);
ApplyStatus(_char,"Light1",-1.0);

QRY
QRY_applyNewLightStatus((INTEGER)_lightLevel)
AND
_lightLevel==0
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_char)
THEN
PROC_clearLightStatus(_char);
ApplyStatus(_char,"Light0",-1.0);

PROC
PROC_clearLightStatus((CHARACTERGUID)_char)
THEN
RemoveStatus((GUIDSTRING)_char,"Light0");
RemoveStatus((GUIDSTRING)_char,"Light1");
RemoveStatus((GUIDSTRING)_char,"Light2");
RemoveStatus((GUIDSTRING)_char,"Light3");
//END_REGION

//REGION //moral and stress system
PROC
PROC_PlayersCharacters_initMoral((CHARACTERGUID)_char)
AND
NOT DB_PlayersCharacters_Moral(_char,_)
THEN
DB_PlayersCharacters_Moral((CHARACTERGUID)_char,0);

IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_Potion_Sanity_1f041805-fecb-4235-9b24-45c930b9790a")
AND
ItemIsInUserInventory(_item,_char,0,1)
THEN
ItemTemplateRemoveFromUser("Quest_DDOD_Potion_Sanity_1f041805-fecb-4235-9b24-45c930b9790a",_char,1);
PROC_changeMoral(_char,1);

IF
CharacterUsedItem(_char,_item)
AND
GetTemplate(_item,"Quest_DDOD_Potion_Insanity_bf7d0257-2993-47fd-8c7b-bb70766c9277")
AND
ItemIsInUserInventory(_item,_char,0,1)
THEN
ItemTemplateRemoveFromUser("Quest_DDOD_Potion_Insanity_bf7d0257-2993-47fd-8c7b-bb70766c9277",_char,1);
PROC_changeMoral(_char,-1);

IF
CharacterUsedItem(_char,_item)
AND
IsTagged(_item,"ALCOHOL",1)
AND
Random(3,_result)
AND
IntegerSubtract(_result,1,_moralChange)
THEN
PROC_changeMoral(_char,_moralChange);


IF //party get damaged
CharacterReceivedDamage(_char,_perc,_source)
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_char)
AND
_perc > 33
THEN
PROC_changeMoral(_char,-1);

IF //party recieved critical hit
CharacterCriticalHitBy(_partyChar,_enemyChar,_char)
AND
DB_generatedRoomEnemies(_,_enemyChar)
AND
DB_PlayersCharacters_Active((CHARACTERGUID)_partyChar)
AND
Random(3,_debuffChance)
AND
_debuffChance>0
THEN
PROC_changeMoral(_partyChar,-1);

IF //enemy have died
CharacterDied(_char)
AND
DB_generatedRoomEnemies(_,_char)
AND
Random(2,_debuffChance)
AND
_debuffChance>0
THEN
PROC_changeMoral(1);

IF //enemy recieved critical hit
CharacterCriticalHitBy(_enemyChar,_partyChar,_char)
AND
DB_generatedRoomEnemies(_,_enemyChar)
AND
DB_PlayersCharacters_Active(_partyChar)
AND
Random(3,_buffChance)
AND
_buffChance==0
THEN
PROC_changeMoral(_partyChar,1);

PROC
PROC_changeMoral((CHARACTERGUID)_char,(INTEGER)_value)
AND
DB_PlayersCharacters_Moral(_char,_moral)
AND
DB_PlayersCharacters_Fatigue(_char,_fatigue)
AND
_value<0
AND
_fatigue>1
AND
IntegerSubtract(_fatigue,1,_fatigueKoeff)
AND
IntegerSubtract(_value,_fatigueKoeff,_newValue)
AND
IntegerMax(0,_newValue,_newValueClamp)
AND
IntegerSum(_moral,_newValueClamp,_newMoral)
AND
IntegerMin(_newMoral,6,_maxMoral)
AND
IntegerMax(_maxMoral,-9,_resultMoral)
THEN
NOT DB_PlayersCharacters_Moral(_char,_moral);
DB_PlayersCharacters_Moral(_char,_resultMoral);


PROC
PROC_changeMoral((CHARACTERGUID)_char,(INTEGER)_value)
AND
DB_PlayersCharacters_Active(_char)
AND
DB_PlayersCharacters_Moral(_char,_moral)
AND
_value>=0
AND
IntegerSum(_moral,_value,_newMoral)
AND
IntegerMin(_newMoral,6,_maxMoral)
AND
IntegerMax(_maxMoral,-9,_resultMoral)
THEN
NOT DB_PlayersCharacters_Moral(_char,_moral);
DB_PlayersCharacters_Moral(_char,_resultMoral);

PROC
PROC_changeMoral((INTEGER)_value)
AND
DB_PlayersCharacters_Active(_char)
THEN
PROC_changeMoral((CHARACTERGUID)_char,(INTEGER)_value);

IF
DB_PlayersCharacters_Moral(_char,_moral)
AND
QRY_applyNewMoralStatus(_char,_moral)
THEN
DB_NOOP(0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral==6
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral3",-1.0);
PROC_applyPartyInspire();

PROC
PROC_applyPartyInspire()
AND
DB_PlayersCharacters_Active(_char)
THEN
ApplyStatus(_char,"ENCOURAGED",2.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>3
AND
_moral<6
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral2",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>1
AND
_moral<4
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral1",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>-2
AND
_moral<2
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral0",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>-4
AND
_moral<-1
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral-1",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>-6
AND
_moral<-3
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral-2",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral>-9
AND
_moral<-5
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral-3",-1.0);

QRY
QRY_applyNewMoralStatus((CHARACTERGUID)_char,(INTEGER)_moral)
AND
_moral==-9
THEN
PROC_clearMoralStatus(_char);
ApplyStatus(_char,"Moral-4",-1.0);
ApplyStatus(_char,"MADNESS",2.0);

PROC
PROC_clearMoralStatus((CHARACTERGUID)_char)
THEN
RemoveStatus(_char,"Moral3");
RemoveStatus(_char,"Moral2");
RemoveStatus(_char,"Moral1");
RemoveStatus(_char,"Moral0");
RemoveStatus(_char,"Moral-1");
RemoveStatus(_char,"Moral-2");
RemoveStatus(_char,"Moral-3");
RemoveStatus(_char,"Moral-4");

//END_REGION

//REGION //fatigue
PROC
PROC_PlayersCharacters_initFatigue((CHARACTERGUID)_char)
AND
NOT DB_PlayersCharacters_Fatigue(_char,_)
THEN
DB_PlayersCharacters_Fatigue(_char,0);

PROC
PROC_changeFatigue((CHARACTERGUID)_char,(INTEGER)_value)
AND
DB_PlayersCharacters_Fatigue(_char,_fatigue)
AND
IntegerSum(_value,_fatigue,_newFatigue)
AND
IntegerMin(_newFatigue,3,_maxFatigue)
AND
IntegerMax(_maxFatigue,0,_resultFatigue)
THEN
NOT DB_PlayersCharacters_Fatigue(_char,_fatigue);
DB_PlayersCharacters_Fatigue(_char,_resultFatigue);

IF
DB_PlayersCharacters_Fatigue(_char,_fatigue)
AND
QRY_applyNewFatigueStatus(_char,_fatigue)
THEN
DB_NOOP(0);

QRY
QRY_applyNewFatigueStatus((CHARACTERGUID)_char,(INTEGER)_fatigue)
AND
_fatigue==3
THEN
PROC_clearFatigueStatus(_char);
ApplyStatus(_char,"Fatigue3",-1.0);

QRY
QRY_applyNewFatigueStatus((CHARACTERGUID)_char,(INTEGER)_fatigue)
AND
_fatigue==2
THEN
PROC_clearFatigueStatus(_char);
ApplyStatus(_char,"Fatigue2",-1.0);

QRY
QRY_applyNewFatigueStatus((CHARACTERGUID)_char,(INTEGER)_fatigue)
AND
_fatigue==1
THEN
PROC_clearFatigueStatus(_char);
ApplyStatus(_char,"Fatigue1",-1.0);

QRY
QRY_applyNewFatigueStatus((CHARACTERGUID)_char,(INTEGER)_fatigue)
AND
_fatigue==0
THEN
PROC_clearFatigueStatus(_char);
ApplyStatus(_char,"Fatigue0",-1.0);

PROC
PROC_clearFatigueStatus((CHARACTERGUID)_char)
THEN
RemoveStatus(_char,"Fatigue3");
RemoveStatus(_char,"Fatigue2");
RemoveStatus(_char,"Fatigue1");
RemoveStatus(_char,"Fatigue0");

//END_REGION


IF //update max party lvl
CharacterLeveledUp(_char)
AND
DB_IsPlayer(_char)
AND
DB_playersMaxLevel(_oldChar,_maxLevel)
AND
CharacterGetLevel(_char,_curLevel)
AND
_curLevel>_maxLevel
THEN
NOT DB_playersMaxLevel(_oldChar,_maxLevel);
DB_playersMaxLevel(_char,_curLevel);

//REGION //leave items on flee
PROC
PROC_leaveFood((CHARACTERGUID)_char)
AND
ItemTagIsInCharacterInventory(_char,"FOOD",_itemsCount)
AND
CharacterFindTaggedItem(_char,"FOOD",_itemGuid)
AND
IsTagged(_itemGuid,"Quest",0)
AND
GetTemplate(_itemGuid,_itemTemplate)
AND
CharacterGetItemTemplateCount(_char,_itemTemplate,_itemsStackCount)
AND
IntegerDivide(_itemsStackCount,2,_itemsToRemoveCount)
AND
IntegerMax(_itemsToRemoveCount,1,_corItemsToRemoveCount)
THEN
ItemTemplateRemoveFrom(_itemTemplate,_char,_corItemsToRemoveCount);

PROC
PROC_leaveLight((CHARACTERGUID)_char)
AND
ItemTemplateIsInCharacterInventory(_char,"Quest_DDOD_LightTorch_fec85594-f314-4297-b3d2-6a5a997808c7",_itemsCount)
AND
IntegerDivide(_itemsCount,2,_itemsToRemoveCount)
AND
IntegerMax(_itemsToRemoveCount,1,_corItemsToRemoveCount)
THEN
ItemTemplateRemoveFrom("Quest_DDOD_LightTorch_fec85594-f314-4297-b3d2-6a5a997808c7",_char,_corItemsToRemoveCount);

PROC
PROC_leaveResources()
AND
DB_PlayersCharacters_Active(_char)
THEN
PROC_leaveFood(_char);
PROC_leaveLight(_char);
//END_REGION

//REGION //party death condition
IF //if all player characters are dead -> gameover
CharacterDied(_)
AND
NOT QRY_playersAreAlive()
AND
NOT DB_PlayersCharacters_Inactive(_)
THEN
ShowGameOverMenu();

IF //if all player characters are dead and there is character in Inactive
CharacterDied(_)
AND
NOT QRY_playersAreAlive()
AND
DB_PlayersCharacters_Inactive(_char)
AND
NOT QRY_playersAreAlive()
THEN
PROC_hardExitDungeon();
ObjectClearFlag(_char,"Adventurer_Reserve",-1);

QRY
QRY_playersAreAlive()
AND
DB_IsPlayer(_player)
AND
CharacterIsDead(_player,0)
THEN
DB_NOOP(0);
//END_REGION

QRY
QRY_isNegativeSuspendType((STRING)_suspendType)
AND
_suspendType=="dead"
THEN
DB_NOOP(0);

QRY
QRY_isNegativeSuspendType((STRING)_suspendType)
AND
_suspendType=="resurrect"
THEN
DB_NOOP(0);


IF //saveload fix for temporary player characters
SavegameLoaded(_,_,_,_)
AND
DB_PlayersCharacters_Active(_char)
THEN
CharacterMakeNPC(_char);
CharacterMakePlayer(_char);


PROC
PROC_getDeadCharacters((GUIDSTRING)_getTo)
AND
GetPosition(_getTo,_X,_Y,_Z)
AND
DB_PlayersCharacters_Suspend(_char,"dead")
THEN
SetOnStage(_char,1);
TeleportToPosition(_char,_X,_Y,_Z,"DeadCharacterTeleported",0,1);

//REGION //change character activity status
//suspend -> active

//inactive -> active
PROC 
PROC_PlayersCharacters_ToActive((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Inactive(_char)
THEN
NOT DB_PlayersCharacters_Inactive(_char);
DB_PlayersCharacters_Active(_char);

//new -> inactive
PROC 
PROC_PlayersCharacters_ToInactive((CHARACTERGUID)_char)
AND
NOT DB_PlayersCharacters_Active(_char)
AND
NOT DB_PlayersCharacters_InActive(_char)
AND
NOT DB_PlayersCharacters_Suspend(_char)
THEN
DB_PlayersCharacters_Inactive(_char);
DB_PlayersCharacters_Food((CHARACTERGUID)_char,0);
DB_PlayersCharacters_Moral((CHARACTERGUID)_char,0);
DB_PlayersCharacters_Fatigue((CHARACTERGUID)_char,0);

//active -> inactive
PROC 
PROC_PlayersCharacters_ToInactive((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Active(_char)
THEN
NOT DB_PlayersCharacters_Active(_char);
DB_PlayersCharacters_Inactive(_char);

//suspend dismissed -> inactive
PROC 
PROC_PlayersCharacters_ToInactive((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Suspend(_char,"dismiss")
THEN
NOT DB_PlayersCharacters_Suspend(_char,"dismiss");
DB_PlayersCharacters_Inactive(_char);
DB_PlayersCharacters_Food((CHARACTERGUID)_char,0);
DB_PlayersCharacters_Moral((CHARACTERGUID)_char,0);
DB_PlayersCharacters_Fatigue((CHARACTERGUID)_char,0);

//suspend dead -> inactive
PROC 
PROC_PlayersCharacters_ToInactive((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Suspend(_char,"dead")
THEN
NOT DB_PlayersCharacters_Suspend(_char,"dead");
DB_PlayersCharacters_Suspend(_char,"resurrect");
DB_PlayersCharacters_Inactive(_char);

//active -> suspend dead
PROC 
PROC_PlayersCharacters_ToDead((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Active(_char)
THEN
NOT DB_PlayersCharacters_Active(_char);
PROC_PlayersCharacters_RemoveFood(_char);
PROC_PlayersCharacters_RemoveMoral(_char);
PROC_PlayersCharacters_RemoveFatigue(_char);
DB_PlayersCharacters_Suspend(_char,"dead");

//inactive -> suspend dead
PROC 
PROC_PlayersCharacters_ToDead((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Inactive(_char)
THEN
NOT DB_PlayersCharacters_Inactive(_char);
PROC_PlayersCharacters_RemoveFood(_char);
PROC_PlayersCharacters_RemoveMoral(_char);
PROC_PlayersCharacters_RemoveFatigue(_char);
DB_PlayersCharacters_Suspend(_char,"dead");

//active -> suspend dismissed
PROC 
PROC_PlayersCharacters_ToSuspend((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Active(_char)
THEN
NOT DB_PlayersCharacters_Active(_char);
DB_PlayersCharacters_Suspend(_char,"dismiss");

//inactive -> suspend dismissed
PROC 
PROC_PlayersCharacters_ToSuspend((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Inactive(_char)
THEN
NOT DB_PlayersCharacters_Inactive(_char);
DB_PlayersCharacters_Suspend(_char,"dismiss");



//food to 0
PROC
PROC_PlayersCharacters_ResetFood((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Food(_char,_value)
THEN
NOT DB_PlayersCharacters_Food(_char,_value);
DB_PlayersCharacters_Food(_char,0);

//remove food stat
PROC
PROC_PlayersCharacters_RemoveFood((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Food(_char,_value)
THEN
NOT DB_PlayersCharacters_Food(_char,_value);

//moral to 0
PROC
PROC_PlayersCharacters_ResetMoral((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Moral(_char,_value)
THEN
NOT DB_PlayersCharacters_Moral(_char,_value);
DB_PlayersCharacters_Moral(_char,0);

//remove moral stat
PROC
PROC_PlayersCharacters_RemoveMoral((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Moral(_char,_value)
THEN
NOT DB_PlayersCharacters_Moral(_char,_value);

//fatigue to 0
PROC
PROC_PlayersCharacters_ResetFatigue((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Fatigue(_char,_value)
THEN
NOT DB_PlayersCharacters_Fatigue(_char,_value);
DB_PlayersCharacters_Fatigue(_char,0);

//remove fatigue stat
PROC
PROC_PlayersCharacters_RemoveFatigue((CHARACTERGUID)_char)
AND
DB_PlayersCharacters_Fatigue(_char,_value)
THEN
NOT DB_PlayersCharacters_Fatigue(_char,_value);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
