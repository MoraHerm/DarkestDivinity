Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_goodPawnsCount(0,0);
//DB_pawns_1(_roomIdx,_pawnCounter,_pawnWeight,_pawnIdx)
//REGION //pawns templates
//must be sorted by weight (low->high) idx(first column) must be sorted (0->n+1)
//[Idx],[Spawn position(0-frontline, 1-middle, 2-backline, 3-special)],[Template guid],[Weight of a pawn],[room weight min threshold for pawn spawn],[room weight max threshold for pawn spawn],[max char lvl],[max equip lvl]
//DB_pawns(0,0,"74109354-2885-4f2d-8bd8-5ed1fe027283",1,0,20,20,0);
DB_pawns(0,0,"DDOD_Human_Fighter_1H_A_15a46692-7e8a-472f-a965-5562d9cf22cb",1,0,20,20,20);
DB_pawns(1,0,"DDOD_Human_Fighter_2H_A_db312d6d-7af6-4689-be06-b60109baccb6",2,0,40,20,20);
DB_pawns(2,1,"DDOD_Human_Fighter_Grenadier_A_1858cabe-b850-4799-81a4-76fe1a2a9562",1,0,20,20,20);
DB_pawns(3,0,"DDOD_Human_Fighter_1H_Heavy_A_3dcb7e25-14f0-4695-855f-5c2059ecce6b",2,4,40,20,20);
DB_pawns(4,0,"DDOD_Human_Fighter_2H_Heavy_A_883923fe-fe9d-4433-9095-87215110f0f4",3,6,60,20,20);
DB_pawns(5,0,"DDOD_Human_Fighter_Mage_AW_A_45d57f24-1283-4867-9130-dc0f9f89b699",3,6,60,20,20);
DB_pawns(6,0,"DDOD_Human_Fighter_Mage_FE_A_7cf6ae1f-a540-4875-8ca1-acd73d43685d",3,6,60,20,20);
DB_pawns(7,1,"DDOD_Human_Assassin_2H_A_60511b74-49c3-4844-9a82-9b5dcbe55b10",1,0,20,20,20);
DB_pawns(8,1,"DDOD_Human_Spearmen_2H_A_4728acab-c703-453d-bf15-cd588f8f4e9f",2,4,80,20,20);
DB_pawns(9,1,"DDOD_Human_Spearmen_2H_Heavy_A_5dcf2123-3e8e-4b40-b65c-d50605ea471a",3,6,60,20,20);
DB_pawns(10,2,"DDOD_Human_Archer_A_259f6590-7f7b-4e3a-8666-e666755d4235",1,0,20,20,20);
DB_pawns(11,2,"DDOD_Human_Crossbowman_A_aa7d1985-f883-4453-ae00-3a94b0c13e16",2,4,40,20,20);
DB_pawns(12,1,"DDOD_Human_SupportMage_EF_A_0416ec4e-cf07-4c80-81b9-c95a3f100fe8",3,6,60,20,20);
DB_pawns(13,1,"DDOD_Human_SupportMage_EF_A_0416ec4e-cf07-4c80-81b9-c95a3f100fe8",3,6,60,20,20);
DB_pawns(14,2,"DDOD_Human_DamageMage_AW_A_abafc1d8-5bbd-4789-be77-21ec2212dd0e",4,8,80,20,20);
DB_pawns(15,2,"DDOD_Human_DamageMage_FE_A_ece5fc4e-fea0-493d-86d3-4abe76e7845b",4,8,80,20,20);
DB_pawns(16,0,"DDOD_Human_Polymorph_2H_Spearman_A_4afe96a4-0e45-4b27-8338-4cfaaed1a797",3,6,60,20,20);
DB_pawns(17,1,"DDOD_Human_Polymorph_Grenadier_A_9be4b820-f373-4d8f-9e15-e4ee9346261d",2,4,40,20,20);
DB_pawns(18,2,"DDOD_Human_Polymorph_Scroller_A_e3626049-4582-4c74-9a99-8497e7eb8544",3,6,60,20,20);

DB_pawns(19,3,"DDOD_Human_Boss_Fighter_2H_Heavy_A_202e48cf-9a2d-4796-80f3-505e052901ac",6,6,60,20,20); //BOSS 2h heavy
DB_pawns(20,3,"DDOD_Human_Boss_Archer_A_c1c1f00f-15ff-4775-8595-b83c34e4257e",6,6,60,20,20);//BOSS archer
DB_pawns(21,3,"DDOD_Human_Boss_DamageMage_AW_A_b6c7e5e1-3adc-415a-8bd0-dba52f93f740",8,8,60,20,20);//boss air mage
DB_pawns(22,3,"DDOD_Human_Boss_DamageMage_FE_A_53517a51-da34-4754-b6d2-23cb2b5c9e6c",8,8,60,20,20);//boss fire mage
DB_pawns(23,3,"DDOD_Human_Boss_Crossbowman_A_28d1e7af-3cdf-4d7a-a2e2-59defbdf4ea1",8,8,60,20,20);//boss crossbowman mage
//DB_pawns(24,3,"DDOD_Human_Boss_Crossbowman_A_28d1e7af-3cdf-4d7a-a2e2-59defbdf4ea1",8,8,60,20,20);//boss crossbowman mage

//END_REGION
KBSECTION
QRY
QRY_checkNextPawnByWeight((INTEGER)_nextIdx,(INTEGER)_maxSearchedWeight)
AND
DB_pawns(_nextIdx,_,_,_weightNext,_,_,_,_)
AND
IntegerMax(_maxSearchedWeight,_weightNext,_weightNext)
THEN
DB_NOOP(1);

QRY
QRY_checkNextPawnByWeight((INTEGER)_nextIdx,(INTEGER)_maxSearchedWeight)
AND
NOT DB_pawns(_nextIdx,_,_,_,_,_,_,_)
THEN
DB_NOOP(1);


PROC
PROC_initPawnWeightCount((INTEGER)_weight)
AND
NOT DB_pawnWeightCount(_weight,_)
THEN
DB_pawnWeightCount(_weight,0);

//counts amout of pawns with given weight(p1) and stores info in DB_pawnWeightCount
PROC 
PROC_countPawnsByWeight((INTEGER)_weight)
AND
DB_pawns(_idx,_,_guid,_weight,_,_,_,_)
AND
DB_pawnWeightCount(_weight,_amout)
AND
IntegerSum(_amout,1,_countResult)
THEN
NOT DB_pawnWeightCount(_weight,_amout);
DB_pawnWeightCount(_weight,_countResult);

//counts pawns by weight for 5 weights(1-5)
PROC 
PROC_countPawnsByWeight()
THEN
PROC_initPawnWeightCount(1);
PROC_countPawnsByWeight(1);
//PROC_prepareTemplatePawnsIdxByWeight(1);

PROC_initPawnWeightCount(2);
PROC_countPawnsByWeight(2);
//PROC_prepareTemplatePawnsIdxByWeight(2);

PROC_initPawnWeightCount(3);
PROC_countPawnsByWeight(3);

PROC_initPawnWeightCount(4);
PROC_countPawnsByWeight(4);

PROC_initPawnWeightCount(5);
PROC_countPawnsByWeight(5);

QRY
QRY_helperGeneratePawnsLastRoom((INTEGER)_roomIdx,(INTEGER)_pawnCounter)
AND
NOT DB_lastRoomIdx(_roomIdx)
THEN
DB_NOOP(0);

QRY
QRY_helperGeneratePawnsLastRoom((INTEGER)_roomIdx,(INTEGER)_pawnCounter)
AND
DB_lastRoomIdx(_roomIdx)
AND
NOT _pawnCounter == 0
THEN
DB_NOOP(0);

//Nested proc for generation of pawns with room weight control
PROC
PROC_generatePawns((INTEGER)_roomIdx,(INTEGER)_roomLayout,(INTEGER)_maxEnemiesInRoom,(INTEGER)_srWeight,(INTEGER)_wCounter,(INTEGER)_pawnCounter)
AND
_pawnCounter<_maxEnemiesInRoom
AND
_wCounter<_srWeight

AND
QRY_helperGeneratePawnsLastRoom(_roomIdx,_pawnCounter)

AND
IntegerSubtract(_maxEnemiesInRoom,_pawnCounter,_pawnsLeft)
AND
IntegerDivide(_srWeight,_pawnsLeft,_singlePawnMaxWeight)
AND
IntegerSum(_singlePawnMaxWeight,1,_srWeightEd)
AND
Random(_srWeightEd,_weightMaxRand)
AND
IntegerMax(_weightMaxRand,1,_pawnMaxWeightNotCor)

AND
IntegerSubtract(_srWeight,_wCounter,_maxLeftPawnWeight)
AND
IntegerMin(_maxLeftPawnWeight,_pawnMaxWeightNotCor,_pawnMaxWeight)

AND
QRY_resetGoodPawnsCount()
AND
QRY_countRequiredPawns(_pawnMaxWeight,_srWeight)
AND
DB_goodPawnsCount(_goodPawnsCount,_pawnWeight)
AND
Random(_goodPawnsCount,_requiredPawnNumber)
AND
QRY_resetCounter()

AND
DB_pawns(_pawnIdx,_spawnPosition,_guid,_pawnWeight,_pawnRoomWeightMinThreshold,_pawnRoomWeightMaxThreshold,_pawnCharMaxLevel,_pawnEquipMaxLevel)

AND
_srWeight>=_pawnRoomWeightMinThreshold
AND
_srWeight<=_pawnRoomWeightMaxThreshold

AND
DB_counter(_counter)
AND
QRY_counter()
AND
_counter==_requiredPawnNumber
AND
NOT DB_pawns_1(_roomIdx,_pawnCounter,_,_)//patches bug kind of

AND
IntegerSum(_pawnCounter,1,_newPawnCounter)
AND
IntegerSum(_wCounter,_pawnWeight,_newWeight)

THEN
DB_pawns_1(_roomIdx,_pawnCounter,_pawnWeight,_pawnIdx);
PROC_generatePawns(_roomIdx,_roomLayout,_maxEnemiesInRoom,_srWeight,_newWeight,_newPawnCounter);

//proc for boss
PROC
PROC_generatePawns((INTEGER)_roomIdx,(INTEGER)_roomLayout,(INTEGER)_maxEnemiesInRoom,(INTEGER)_srWeight,(INTEGER)_wCounter,(INTEGER)_pawnCounter)
AND
_pawnCounter<_maxEnemiesInRoom
AND
_wCounter<_srWeight

AND
DB_lastRoomIdx(_roomIdx)
AND
_pawnCounter == 0

AND
IntegerSubtract(_srWeight,_wCounter,_pawnMaxWeight)


AND
QRY_resetGoodPawnsCount()
AND
QRY_countRequiredPawns(_pawnMaxWeight,_srWeight,3)
AND
DB_goodPawnsCount(_goodPawnsCount,_pawnWeight)
AND
Random(_goodPawnsCount,_requiredPawnNumber)
AND
QRY_resetCounter()

AND
DB_pawns(_pawnIdx,3,_guid,_pawnWeight,_pawnRoomWeightMinThreshold,_pawnRoomWeightMaxThreshold,_pawnCharMaxLevel,_pawnEquipMaxLevel)

AND
_srWeight>=_pawnRoomWeightMinThreshold
AND
_srWeight<=_pawnRoomWeightMaxThreshold

AND
DB_counter(_counter)
AND
QRY_counter()
AND
_counter==_requiredPawnNumber
AND
NOT DB_pawns_1(_roomIdx,_pawnCounter,_,_)//patches bug kind of

AND
IntegerSum(_pawnCounter,1,_newPawnCounter)
AND
IntegerSum(_wCounter,_pawnWeight,_newWeight)

THEN
DB_pawns_1(_roomIdx,_pawnCounter,_pawnWeight,_pawnIdx);
PROC_generatePawns(_roomIdx,_roomLayout,_maxEnemiesInRoom,_srWeight,_newWeight,_newPawnCounter);

//REGION
QRY
QRY_countRequiredPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight)
THEN
PROC_checkCountPawns(_pawnWeight,_srWeight);
PROC_countLesserWeightPawns(_pawnWeight,_srWeight);

PROC
PROC_checkCountPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight)
AND
QRY_resetCounter()
AND
DB_pawns(_pawnIdx,_spawnPosition,_guid,_pawnWeight,_pawnRoomWeightMinThreshold,_pawnRoomWeightMaxThreshold,_pawnCharMaxLevel,_pawnEquipMaxLevel)
AND
QRY_counter()
AND
_srWeight>=_pawnRoomWeightMinThreshold
AND
_srWeight<=_pawnRoomWeightMaxThreshold
AND
DB_counter(_counter)
AND
DB_goodPawnsCount(_oldCount,_oldWeight)
THEN
NOT DB_goodPawnsCount(_oldCount,_oldWeight);
DB_goodPawnsCount(_counter,_pawnWeight);

PROC
PROC_countLesserWeightPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight)
AND
DB_goodPawnsCount(0,_)
AND
_pawnWeight > 0
AND
IntegerSum(_pawnWeight,-1,_newPawnWeight)
AND
QRY_countRequiredPawns((INTEGER)_newPawnWeight,(INTEGER)_srWeight)
THEN
DB_NOOP(0);
//END_REGION

//REGION
QRY
QRY_countRequiredPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight,(INTEGER)_spawnPosition)
THEN
PROC_checkCountPawns(_pawnWeight,_srWeight,_spawnPosition);
PROC_countLesserWeightPawns(_pawnWeight,_srWeight,_spawnPosition);

PROC
PROC_checkCountPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight,(INTEGER)_spawnPosition)
AND
QRY_resetCounter()
AND
DB_pawns(_pawnIdx,_spawnPosition,_guid,_pawnWeight,_pawnRoomWeightMinThreshold,_pawnRoomWeightMaxThreshold,_pawnCharMaxLevel,_pawnEquipMaxLevel)
AND
QRY_counter()
AND
_srWeight>=_pawnRoomWeightMinThreshold
AND
_srWeight<=_pawnRoomWeightMaxThreshold
AND
DB_counter(_counter)
AND
DB_goodPawnsCount(_oldCount,_oldWeight)
THEN
NOT DB_goodPawnsCount(_oldCount,_oldWeight);
DB_goodPawnsCount(_counter,_pawnWeight);

PROC
PROC_countLesserWeightPawns((INTEGER)_pawnWeight,(INTEGER)_srWeight,(INTEGER)_spawnPosition)
AND
DB_goodPawnsCount(0,_)
AND
_pawnWeight > 0
AND
IntegerSum(_pawnWeight,-1,_newPawnWeight)
AND
QRY_countRequiredPawns((INTEGER)_newPawnWeight,(INTEGER)_srWeight,(INTEGER)_spawnPosition)
THEN
DB_NOOP(0);
//END_REGION

QRY
QRY_resetGoodPawnsCount()
AND
DB_goodPawnsCount(_count,_weight)
THEN
NOT DB_goodPawnsCount(_count,_weight);
DB_goodPawnsCount(0,0);

PROC
PROC_clearPawnsData()
AND
DB_pawns_1(_roomIdx,_pawnCounter,_pawnWeight,_pawnIdx)
THEN
NOT DB_pawns_1(_roomIdx,_pawnCounter,_pawnWeight,_pawnIdx);

PROC
PROC_PawnsDebugLog()
AND
DB_pawns_1(_,_,_,_)
THEN
DB_NOOP(1);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
